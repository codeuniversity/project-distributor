package org.codeberlin.projectdistributor.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

import org.codeberlin.projectdistributor.model.Application;
import org.codeberlin.projectdistributor.model.ProjectAssignment;
import org.codeberlin.projectdistributor.model.Project;
import org.codeberlin.projectdistributor.data.Role;
import org.codeberlin.projectdistributor.data.Roles;
import org.codeberlin.projectdistributor.model.Student;

global HardMediumSoftScoreHolder scoreHolder;

// Hard constraints

rule "maxStudents"
    when
        $role : Role()
        $project : Project($roles : roles)
        accumulate(
            Student(chosenProject == $project,
                getChosenAppPriority() < 10,
                getChosenAppRole() == $role);
            $participants : count(1);
            $participants > $project.getRoles().getMax($role)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $project.getRoles().getMax($role) - $participants.intValue());
end

// Medium constraint

rule "minStudents"
    when
        $role : Role()
        $project : Project($roles : roles)
        exists Student(chosenProject == $project) // if there is at least one student that chose this project
        accumulate(
            Student(chosenProject == $project,
                getChosenAppPriority() < 10,
                getChosenAppRole() == $role);
            $participants : count(1);
            $participants < $project.getRoles().getMin($role)
        )
    then
        scoreHolder.addMediumConstraintMatch(kcontext, $participants.intValue() - $project.getRoles().getMin($role));
end

// Soft constraints

rule "studentPreference"
    when
        $student : Student(chosenProject != null)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $student.getChosenAppPriority());
end
